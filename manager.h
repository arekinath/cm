/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p manager connman-manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MANAGER_H_1294050919
#define MANAGER_H_1294050919

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface net.connman.Manager
 */
class NetConnmanManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.Manager"; }

public:
    NetConnmanManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NetConnmanManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> ConnectService(const QVariantMap &network)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(network);
        return asyncCallWithArgumentList(QLatin1String("ConnectService"), argumentList);
    }

    inline QDBusPendingReply<> DisableTechnology(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(type);
        return asyncCallWithArgumentList(QLatin1String("DisableTechnology"), argumentList);
    }

    inline QDBusPendingReply<> EnableTechnology(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(type);
        return asyncCallWithArgumentList(QLatin1String("EnableTechnology"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServices"), argumentList);
    }

    inline QDBusPendingReply<QString> GetState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetState"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LookupService(const QString &pattern)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(pattern);
        return asyncCallWithArgumentList(QLatin1String("LookupService"), argumentList);
    }

    inline QDBusPendingReply<> RequestScan(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(type);
        return asyncCallWithArgumentList(QLatin1String("RequestScan"), argumentList);
    }

		inline QList<QDBusObjectPath> ServicePaths()
		{
			QDBusArgument apaths = this->GetProperty("Services");
			QList<QDBusObjectPath> paths = qdbus_cast<QList<QDBusObjectPath> >(apaths);
			return paths;
		}
		
		inline QDBusArgument GetProperty(const QString &name)
		{
			QDBusPendingReply<QVariantMap> repl = this->GetProperties();
			repl.waitForFinished();
			
			QVariant v = repl.value().value(name);
			QDBusArgument a = qvariant_cast<QDBusArgument>(v);
			return a;
		}

    inline QDBusPendingReply<> SetProperty(const QString &name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(value);
        return asyncCallWithArgumentList(QLatin1String("SetProperty"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertyChanged(const QString &name, const QDBusVariant &value);
};

namespace net {
  namespace connman {
    typedef ::NetConnmanManagerInterface Manager;
  }
}
#endif
